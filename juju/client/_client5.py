# DO NOT CHANGE THIS FILE! This file is auto-generated by facade.py.
# Changes will be overwritten/lost when the file is regenerated.

from juju.client._definitions import *
from juju.client.facade import ReturnMapping, Type


class ApplicationOffersFacade(Type):
    name = "ApplicationOffers"
    version = 5
    schema = {
        "definitions": {
            "AddApplicationOffer": {
                "additionalProperties": False,
                "properties": {
                    "application-description": {"type": "string"},
                    "application-name": {"type": "string"},
                    "endpoints": {
                        "patternProperties": {".*": {"type": "string"}},
                        "type": "object",
                    },
                    "model-tag": {"type": "string"},
                    "offer-name": {"type": "string"},
                    "owner-tag": {"type": "string"},
                },
                "required": [
                    "model-tag",
                    "offer-name",
                    "application-name",
                    "application-description",
                    "endpoints",
                ],
                "type": "object",
            },
            "AddApplicationOffers": {
                "additionalProperties": False,
                "properties": {
                    "Offers": {
                        "items": {"$ref": "#/definitions/AddApplicationOffer"},
                        "type": "array",
                    }
                },
                "required": ["Offers"],
                "type": "object",
            },
            "ApplicationOfferAdminDetailsV5": {
                "additionalProperties": False,
                "properties": {
                    "ApplicationOfferDetailsV5": {
                        "$ref": "#/definitions/ApplicationOfferDetailsV5"
                    },
                    "application-description": {"type": "string"},
                    "application-name": {"type": "string"},
                    "charm-url": {"type": "string"},
                    "connections": {
                        "items": {"$ref": "#/definitions/OfferConnection"},
                        "type": "array",
                    },
                    "endpoints": {
                        "items": {"$ref": "#/definitions/RemoteEndpoint"},
                        "type": "array",
                    },
                    "offer-name": {"type": "string"},
                    "offer-url": {"type": "string"},
                    "offer-uuid": {"type": "string"},
                    "source-model-tag": {"type": "string"},
                    "users": {
                        "items": {"$ref": "#/definitions/OfferUserDetails"},
                        "type": "array",
                    },
                },
                "required": [
                    "source-model-tag",
                    "offer-uuid",
                    "offer-url",
                    "offer-name",
                    "application-description",
                    "ApplicationOfferDetailsV5",
                    "application-name",
                    "charm-url",
                ],
                "type": "object",
            },
            "ApplicationOfferDetailsV5": {
                "additionalProperties": False,
                "properties": {
                    "application-description": {"type": "string"},
                    "endpoints": {
                        "items": {"$ref": "#/definitions/RemoteEndpoint"},
                        "type": "array",
                    },
                    "offer-name": {"type": "string"},
                    "offer-url": {"type": "string"},
                    "offer-uuid": {"type": "string"},
                    "source-model-tag": {"type": "string"},
                    "users": {
                        "items": {"$ref": "#/definitions/OfferUserDetails"},
                        "type": "array",
                    },
                },
                "required": [
                    "source-model-tag",
                    "offer-uuid",
                    "offer-url",
                    "offer-name",
                    "application-description",
                ],
                "type": "object",
            },
            "ApplicationOfferResult": {
                "additionalProperties": False,
                "properties": {
                    "error": {"$ref": "#/definitions/Error"},
                    "result": {"$ref": "#/definitions/ApplicationOfferAdminDetailsV5"},
                },
                "type": "object",
            },
            "ApplicationOffersResults": {
                "additionalProperties": False,
                "properties": {
                    "results": {
                        "items": {"$ref": "#/definitions/ApplicationOfferResult"},
                        "type": "array",
                    }
                },
                "type": "object",
            },
            "ConsumeOfferDetails": {
                "additionalProperties": False,
                "properties": {
                    "external-controller": {
                        "$ref": "#/definitions/ExternalControllerInfo"
                    },
                    "macaroon": {"$ref": "#/definitions/Macaroon"},
                    "offer": {"$ref": "#/definitions/ApplicationOfferDetailsV5"},
                },
                "type": "object",
            },
            "ConsumeOfferDetailsArg": {
                "additionalProperties": False,
                "properties": {
                    "offer-urls": {"$ref": "#/definitions/OfferURLs"},
                    "user-tag": {"type": "string"},
                },
                "required": ["offer-urls"],
                "type": "object",
            },
            "ConsumeOfferDetailsResult": {
                "additionalProperties": False,
                "properties": {
                    "ConsumeOfferDetails": {
                        "$ref": "#/definitions/ConsumeOfferDetails"
                    },
                    "error": {"$ref": "#/definitions/Error"},
                    "external-controller": {
                        "$ref": "#/definitions/ExternalControllerInfo"
                    },
                    "macaroon": {"$ref": "#/definitions/Macaroon"},
                    "offer": {"$ref": "#/definitions/ApplicationOfferDetailsV5"},
                },
                "required": ["ConsumeOfferDetails"],
                "type": "object",
            },
            "ConsumeOfferDetailsResults": {
                "additionalProperties": False,
                "properties": {
                    "results": {
                        "items": {"$ref": "#/definitions/ConsumeOfferDetailsResult"},
                        "type": "array",
                    }
                },
                "type": "object",
            },
            "DestroyApplicationOffers": {
                "additionalProperties": False,
                "properties": {
                    "force": {"type": "boolean"},
                    "offer-urls": {"items": {"type": "string"}, "type": "array"},
                },
                "required": ["offer-urls"],
                "type": "object",
            },
            "EndpointFilterAttributes": {
                "additionalProperties": False,
                "properties": {
                    "interface": {"type": "string"},
                    "name": {"type": "string"},
                    "role": {"type": "string"},
                },
                "required": ["role", "interface", "name"],
                "type": "object",
            },
            "EntityStatus": {
                "additionalProperties": False,
                "properties": {
                    "data": {
                        "patternProperties": {
                            ".*": {"additionalProperties": True, "type": "object"}
                        },
                        "type": "object",
                    },
                    "info": {"type": "string"},
                    "since": {"format": "date-time", "type": "string"},
                    "status": {"type": "string"},
                },
                "required": ["status", "info", "since"],
                "type": "object",
            },
            "Error": {
                "additionalProperties": False,
                "properties": {
                    "code": {"type": "string"},
                    "info": {
                        "patternProperties": {
                            ".*": {"additionalProperties": True, "type": "object"}
                        },
                        "type": "object",
                    },
                    "message": {"type": "string"},
                },
                "required": ["message", "code"],
                "type": "object",
            },
            "ErrorResult": {
                "additionalProperties": False,
                "properties": {"error": {"$ref": "#/definitions/Error"}},
                "type": "object",
            },
            "ErrorResults": {
                "additionalProperties": False,
                "properties": {
                    "results": {
                        "items": {"$ref": "#/definitions/ErrorResult"},
                        "type": "array",
                    }
                },
                "required": ["results"],
                "type": "object",
            },
            "ExternalControllerInfo": {
                "additionalProperties": False,
                "properties": {
                    "addrs": {"items": {"type": "string"}, "type": "array"},
                    "ca-cert": {"type": "string"},
                    "controller-alias": {"type": "string"},
                    "controller-tag": {"type": "string"},
                },
                "required": ["controller-tag", "controller-alias", "addrs", "ca-cert"],
                "type": "object",
            },
            "Macaroon": {"additionalProperties": False, "type": "object"},
            "ModifyOfferAccess": {
                "additionalProperties": False,
                "properties": {
                    "access": {"type": "string"},
                    "action": {"type": "string"},
                    "offer-url": {"type": "string"},
                    "user-tag": {"type": "string"},
                },
                "required": ["user-tag", "action", "access", "offer-url"],
                "type": "object",
            },
            "ModifyOfferAccessRequest": {
                "additionalProperties": False,
                "properties": {
                    "changes": {
                        "items": {"$ref": "#/definitions/ModifyOfferAccess"},
                        "type": "array",
                    }
                },
                "required": ["changes"],
                "type": "object",
            },
            "OfferConnection": {
                "additionalProperties": False,
                "properties": {
                    "endpoint": {"type": "string"},
                    "ingress-subnets": {"items": {"type": "string"}, "type": "array"},
                    "relation-id": {"type": "integer"},
                    "source-model-tag": {"type": "string"},
                    "status": {"$ref": "#/definitions/EntityStatus"},
                    "username": {"type": "string"},
                },
                "required": [
                    "source-model-tag",
                    "relation-id",
                    "username",
                    "endpoint",
                    "status",
                    "ingress-subnets",
                ],
                "type": "object",
            },
            "OfferFilter": {
                "additionalProperties": False,
                "properties": {
                    "allowed-users": {"items": {"type": "string"}, "type": "array"},
                    "application-description": {"type": "string"},
                    "application-name": {"type": "string"},
                    "application-user": {"type": "string"},
                    "connected-users": {"items": {"type": "string"}, "type": "array"},
                    "endpoints": {
                        "items": {"$ref": "#/definitions/EndpointFilterAttributes"},
                        "type": "array",
                    },
                    "model-name": {"type": "string"},
                    "offer-name": {"type": "string"},
                    "owner-name": {"type": "string"},
                },
                "required": [
                    "owner-name",
                    "model-name",
                    "offer-name",
                    "application-name",
                    "application-description",
                    "application-user",
                    "endpoints",
                    "connected-users",
                    "allowed-users",
                ],
                "type": "object",
            },
            "OfferFilters": {
                "additionalProperties": False,
                "properties": {
                    "Filters": {
                        "items": {"$ref": "#/definitions/OfferFilter"},
                        "type": "array",
                    }
                },
                "required": ["Filters"],
                "type": "object",
            },
            "OfferURLs": {
                "additionalProperties": False,
                "properties": {
                    "bakery-version": {"type": "integer"},
                    "offer-urls": {"items": {"type": "string"}, "type": "array"},
                },
                "type": "object",
            },
            "OfferUserDetails": {
                "additionalProperties": False,
                "properties": {
                    "access": {"type": "string"},
                    "display-name": {"type": "string"},
                    "user": {"type": "string"},
                },
                "required": ["user", "display-name", "access"],
                "type": "object",
            },
            "QueryApplicationOffersResultsV5": {
                "additionalProperties": False,
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/definitions/ApplicationOfferAdminDetailsV5"
                        },
                        "type": "array",
                    }
                },
                "required": ["results"],
                "type": "object",
            },
            "RemoteApplicationInfo": {
                "additionalProperties": False,
                "properties": {
                    "description": {"type": "string"},
                    "endpoints": {
                        "items": {"$ref": "#/definitions/RemoteEndpoint"},
                        "type": "array",
                    },
                    "icon-url-path": {"type": "string"},
                    "model-tag": {"type": "string"},
                    "name": {"type": "string"},
                    "offer-url": {"type": "string"},
                    "source-model-label": {"type": "string"},
                },
                "required": [
                    "model-tag",
                    "name",
                    "description",
                    "offer-url",
                    "endpoints",
                    "icon-url-path",
                ],
                "type": "object",
            },
            "RemoteApplicationInfoResult": {
                "additionalProperties": False,
                "properties": {
                    "error": {"$ref": "#/definitions/Error"},
                    "result": {"$ref": "#/definitions/RemoteApplicationInfo"},
                },
                "type": "object",
            },
            "RemoteApplicationInfoResults": {
                "additionalProperties": False,
                "properties": {
                    "results": {
                        "items": {"$ref": "#/definitions/RemoteApplicationInfoResult"},
                        "type": "array",
                    }
                },
                "required": ["results"],
                "type": "object",
            },
            "RemoteEndpoint": {
                "additionalProperties": False,
                "properties": {
                    "interface": {"type": "string"},
                    "limit": {"type": "integer"},
                    "name": {"type": "string"},
                    "role": {"type": "string"},
                },
                "required": ["name", "role", "interface", "limit"],
                "type": "object",
            },
        },
        "properties": {
            "ApplicationOffers": {
                "description": "ApplicationOffers gets "
                "details about remote "
                "applications that match "
                "given URLs.",
                "properties": {
                    "Params": {"$ref": "#/definitions/OfferURLs"},
                    "Result": {"$ref": "#/definitions/ApplicationOffersResults"},
                },
                "type": "object",
            },
            "DestroyOffers": {
                "description": "DestroyOffers removes the "
                "offers specified by the "
                "given URLs, forcing if "
                "necessary.",
                "properties": {
                    "Params": {"$ref": "#/definitions/DestroyApplicationOffers"},
                    "Result": {"$ref": "#/definitions/ErrorResults"},
                },
                "type": "object",
            },
            "FindApplicationOffers": {
                "description": "FindApplicationOffers "
                "gets details about "
                "remote applications "
                "that match given "
                "filter.",
                "properties": {
                    "Params": {"$ref": "#/definitions/OfferFilters"},
                    "Result": {"$ref": "#/definitions/QueryApplicationOffersResultsV5"},
                },
                "type": "object",
            },
            "GetConsumeDetails": {
                "description": "GetConsumeDetails "
                "returns the details "
                "necessary to pass to "
                "another model\n"
                "to allow the specified "
                "args user to consume the "
                "offers represented by "
                "the args URLs.",
                "properties": {
                    "Params": {"$ref": "#/definitions/ConsumeOfferDetailsArg"},
                    "Result": {"$ref": "#/definitions/ConsumeOfferDetailsResults"},
                },
                "type": "object",
            },
            "ListApplicationOffers": {
                "description": "ListApplicationOffers "
                "gets deployed "
                "details about "
                "application offers "
                "that match given "
                "filter.\n"
                "The results contain "
                "details about the "
                "deployed "
                "applications such as "
                "connection count.",
                "properties": {
                    "Params": {"$ref": "#/definitions/OfferFilters"},
                    "Result": {"$ref": "#/definitions/QueryApplicationOffersResultsV5"},
                },
                "type": "object",
            },
            "ModifyOfferAccess": {
                "description": "ModifyOfferAccess "
                "changes the application "
                "offer access granted to "
                "users.",
                "properties": {
                    "Params": {"$ref": "#/definitions/ModifyOfferAccessRequest"},
                    "Result": {"$ref": "#/definitions/ErrorResults"},
                },
                "type": "object",
            },
            "Offer": {
                "description": "Offer makes application endpoints "
                "available for consumption at a "
                "specified URL.",
                "properties": {
                    "Params": {"$ref": "#/definitions/AddApplicationOffers"},
                    "Result": {"$ref": "#/definitions/ErrorResults"},
                },
                "type": "object",
            },
            "RemoteApplicationInfo": {
                "description": "RemoteApplicationInfo "
                "returns information "
                "about the requested "
                "remote application.\n"
                "This call currently "
                "has no client side "
                "API, only there for "
                "the Dashboard at "
                "this stage.",
                "properties": {
                    "Params": {"$ref": "#/definitions/OfferURLs"},
                    "Result": {"$ref": "#/definitions/RemoteApplicationInfoResults"},
                },
                "type": "object",
            },
        },
        "type": "object",
    }

    @ReturnMapping(ApplicationOffersResults)
    async def ApplicationOffers(self, bakery_version=None, offer_urls=None):
        """ApplicationOffers gets details about remote applications that match given URLs.

        bakery_version : int
        offer_urls : typing.Sequence[str]
        Returns -> ApplicationOffersResults
        """
        if bakery_version is not None and not isinstance(bakery_version, int):
            raise Exception(
                f"Expected bakery_version to be a int, received: {type(bakery_version)}"
            )

        if offer_urls is not None and not isinstance(offer_urls, (bytes, str, list)):
            raise Exception(
                f"Expected offer_urls to be a Sequence, received: {type(offer_urls)}"
            )

        # map input types to rpc msg
        _params = dict()
        msg = dict(
            type="ApplicationOffers",
            request="ApplicationOffers",
            version=5,
            params=_params,
        )
        _params["bakery-version"] = bakery_version
        _params["offer-urls"] = offer_urls
        reply = await self.rpc(msg)
        return reply

    @ReturnMapping(ErrorResults)
    async def DestroyOffers(self, force=None, offer_urls=None):
        """DestroyOffers removes the offers specified by the given URLs, forcing if necessary.

        force : bool
        offer_urls : typing.Sequence[str]
        Returns -> ErrorResults
        """
        if force is not None and not isinstance(force, bool):
            raise Exception(f"Expected force to be a bool, received: {type(force)}")

        if offer_urls is not None and not isinstance(offer_urls, (bytes, str, list)):
            raise Exception(
                f"Expected offer_urls to be a Sequence, received: {type(offer_urls)}"
            )

        # map input types to rpc msg
        _params = dict()
        msg = dict(
            type="ApplicationOffers", request="DestroyOffers", version=5, params=_params
        )
        _params["force"] = force
        _params["offer-urls"] = offer_urls
        reply = await self.rpc(msg)
        return reply

    @ReturnMapping(QueryApplicationOffersResultsV5)
    async def FindApplicationOffers(self, filters=None):
        """FindApplicationOffers gets details about remote applications that match given filter.

        filters : typing.Sequence[~OfferFilter]
        Returns -> QueryApplicationOffersResultsV5
        """
        if filters is not None and not isinstance(filters, (bytes, str, list)):
            raise Exception(
                f"Expected filters to be a Sequence, received: {type(filters)}"
            )

        # map input types to rpc msg
        _params = dict()
        msg = dict(
            type="ApplicationOffers",
            request="FindApplicationOffers",
            version=5,
            params=_params,
        )
        _params["Filters"] = filters
        reply = await self.rpc(msg)
        return reply

    @ReturnMapping(ConsumeOfferDetailsResults)
    async def GetConsumeDetails(self, offer_urls=None, user_tag=None):
        """GetConsumeDetails returns the details necessary to pass to another model
        to allow the specified args user to consume the offers represented by the args URLs.

        offer_urls : OfferURLs
        user_tag : str
        Returns -> ConsumeOfferDetailsResults
        """
        if offer_urls is not None and not isinstance(offer_urls, (dict, OfferURLs)):
            raise Exception(
                f"Expected offer_urls to be a OfferURLs, received: {type(offer_urls)}"
            )

        if user_tag is not None and not isinstance(user_tag, (bytes, str)):
            raise Exception(
                f"Expected user_tag to be a str, received: {type(user_tag)}"
            )

        # map input types to rpc msg
        _params = dict()
        msg = dict(
            type="ApplicationOffers",
            request="GetConsumeDetails",
            version=5,
            params=_params,
        )
        _params["offer-urls"] = offer_urls
        _params["user-tag"] = user_tag
        reply = await self.rpc(msg)
        return reply

    @ReturnMapping(QueryApplicationOffersResultsV5)
    async def ListApplicationOffers(self, filters=None):
        """ListApplicationOffers gets deployed details about application offers that match given filter.
        The results contain details about the deployed applications such as connection count.

        filters : typing.Sequence[~OfferFilter]
        Returns -> QueryApplicationOffersResultsV5
        """
        if filters is not None and not isinstance(filters, (bytes, str, list)):
            raise Exception(
                f"Expected filters to be a Sequence, received: {type(filters)}"
            )

        # map input types to rpc msg
        _params = dict()
        msg = dict(
            type="ApplicationOffers",
            request="ListApplicationOffers",
            version=5,
            params=_params,
        )
        _params["Filters"] = filters
        reply = await self.rpc(msg)
        return reply

    @ReturnMapping(ErrorResults)
    async def ModifyOfferAccess(self, changes=None):
        """ModifyOfferAccess changes the application offer access granted to users.

        changes : typing.Sequence[~ModifyOfferAccess]
        Returns -> ErrorResults
        """
        if changes is not None and not isinstance(changes, (bytes, str, list)):
            raise Exception(
                f"Expected changes to be a Sequence, received: {type(changes)}"
            )

        # map input types to rpc msg
        _params = dict()
        msg = dict(
            type="ApplicationOffers",
            request="ModifyOfferAccess",
            version=5,
            params=_params,
        )
        _params["changes"] = changes
        reply = await self.rpc(msg)
        return reply

    @ReturnMapping(ErrorResults)
    async def Offer(self, offers=None):
        """Offer makes application endpoints available for consumption at a specified URL.

        offers : typing.Sequence[~AddApplicationOffer]
        Returns -> ErrorResults
        """
        if offers is not None and not isinstance(offers, (bytes, str, list)):
            raise Exception(
                f"Expected offers to be a Sequence, received: {type(offers)}"
            )

        # map input types to rpc msg
        _params = dict()
        msg = dict(type="ApplicationOffers", request="Offer", version=5, params=_params)
        _params["Offers"] = offers
        reply = await self.rpc(msg)
        return reply

    @ReturnMapping(RemoteApplicationInfoResults)
    async def RemoteApplicationInfo(self, bakery_version=None, offer_urls=None):
        """RemoteApplicationInfo returns information about the requested remote application.
        This call currently has no client side API, only there for the Dashboard at this stage.

        bakery_version : int
        offer_urls : typing.Sequence[str]
        Returns -> RemoteApplicationInfoResults
        """
        if bakery_version is not None and not isinstance(bakery_version, int):
            raise Exception(
                f"Expected bakery_version to be a int, received: {type(bakery_version)}"
            )

        if offer_urls is not None and not isinstance(offer_urls, (bytes, str, list)):
            raise Exception(
                f"Expected offer_urls to be a Sequence, received: {type(offer_urls)}"
            )

        # map input types to rpc msg
        _params = dict()
        msg = dict(
            type="ApplicationOffers",
            request="RemoteApplicationInfo",
            version=5,
            params=_params,
        )
        _params["bakery-version"] = bakery_version
        _params["offer-urls"] = offer_urls
        reply = await self.rpc(msg)
        return reply


class SubnetsFacade(Type):
    name = "Subnets"
    version = 5
    schema = {
        "definitions": {
            "CIDRParams": {
                "additionalProperties": False,
                "properties": {"cidrs": {"items": {"type": "string"}, "type": "array"}},
                "required": ["cidrs"],
                "type": "object",
            },
            "Error": {
                "additionalProperties": False,
                "properties": {
                    "code": {"type": "string"},
                    "info": {
                        "patternProperties": {
                            ".*": {"additionalProperties": True, "type": "object"}
                        },
                        "type": "object",
                    },
                    "message": {"type": "string"},
                },
                "required": ["message", "code"],
                "type": "object",
            },
            "ListSubnetsResults": {
                "additionalProperties": False,
                "properties": {
                    "results": {
                        "items": {"$ref": "#/definitions/Subnet"},
                        "type": "array",
                    }
                },
                "required": ["results"],
                "type": "object",
            },
            "Subnet": {
                "additionalProperties": False,
                "properties": {
                    "cidr": {"type": "string"},
                    "life": {"type": "string"},
                    "provider-id": {"type": "string"},
                    "provider-network-id": {"type": "string"},
                    "provider-space-id": {"type": "string"},
                    "space-tag": {"type": "string"},
                    "status": {"type": "string"},
                    "vlan-tag": {"type": "integer"},
                    "zones": {"items": {"type": "string"}, "type": "array"},
                },
                "required": ["cidr", "vlan-tag", "life", "space-tag", "zones"],
                "type": "object",
            },
            "SubnetV2": {
                "additionalProperties": False,
                "properties": {
                    "Subnet": {"$ref": "#/definitions/Subnet"},
                    "cidr": {"type": "string"},
                    "id": {"type": "string"},
                    "life": {"type": "string"},
                    "provider-id": {"type": "string"},
                    "provider-network-id": {"type": "string"},
                    "provider-space-id": {"type": "string"},
                    "space-tag": {"type": "string"},
                    "status": {"type": "string"},
                    "vlan-tag": {"type": "integer"},
                    "zones": {"items": {"type": "string"}, "type": "array"},
                },
                "required": [
                    "cidr",
                    "vlan-tag",
                    "life",
                    "space-tag",
                    "zones",
                    "Subnet",
                ],
                "type": "object",
            },
            "SubnetsFilters": {
                "additionalProperties": False,
                "properties": {
                    "space-tag": {"type": "string"},
                    "zone": {"type": "string"},
                },
                "type": "object",
            },
            "SubnetsResult": {
                "additionalProperties": False,
                "properties": {
                    "error": {"$ref": "#/definitions/Error"},
                    "subnets": {
                        "items": {"$ref": "#/definitions/SubnetV2"},
                        "type": "array",
                    },
                },
                "type": "object",
            },
            "SubnetsResults": {
                "additionalProperties": False,
                "properties": {
                    "results": {
                        "items": {"$ref": "#/definitions/SubnetsResult"},
                        "type": "array",
                    }
                },
                "required": ["results"],
                "type": "object",
            },
            "ZoneResult": {
                "additionalProperties": False,
                "properties": {
                    "available": {"type": "boolean"},
                    "error": {"$ref": "#/definitions/Error"},
                    "name": {"type": "string"},
                },
                "required": ["name", "available"],
                "type": "object",
            },
            "ZoneResults": {
                "additionalProperties": False,
                "properties": {
                    "results": {
                        "items": {"$ref": "#/definitions/ZoneResult"},
                        "type": "array",
                    }
                },
                "required": ["results"],
                "type": "object",
            },
        },
        "properties": {
            "AllZones": {
                "description": "AllZones returns all availability "
                "zones known to Juju. If a\n"
                "zone is unusable, unavailable, or "
                "deprecated the Available\n"
                "field will be false.",
                "properties": {"Result": {"$ref": "#/definitions/ZoneResults"}},
                "type": "object",
            },
            "ListSubnets": {
                "description": "ListSubnets returns the "
                "matching subnets after "
                "applying\n"
                "optional filters.",
                "properties": {
                    "Params": {"$ref": "#/definitions/SubnetsFilters"},
                    "Result": {"$ref": "#/definitions/ListSubnetsResults"},
                },
                "type": "object",
            },
            "SubnetsByCIDR": {
                "description": "SubnetsByCIDR returns the "
                "collection of subnets "
                "matching each CIDR in the "
                "input.",
                "properties": {
                    "Params": {"$ref": "#/definitions/CIDRParams"},
                    "Result": {"$ref": "#/definitions/SubnetsResults"},
                },
                "type": "object",
            },
        },
        "type": "object",
    }

    @ReturnMapping(ZoneResults)
    async def AllZones(self):
        """AllZones returns all availability zones known to Juju. If a
        zone is unusable, unavailable, or deprecated the Available
        field will be false.


        Returns -> ZoneResults
        """
        # map input types to rpc msg
        _params = dict()
        msg = dict(type="Subnets", request="AllZones", version=5, params=_params)

        reply = await self.rpc(msg)
        return reply

    @ReturnMapping(ListSubnetsResults)
    async def ListSubnets(self, space_tag=None, zone=None):
        """ListSubnets returns the matching subnets after applying
        optional filters.

        space_tag : str
        zone : str
        Returns -> ListSubnetsResults
        """
        if space_tag is not None and not isinstance(space_tag, (bytes, str)):
            raise Exception(
                f"Expected space_tag to be a str, received: {type(space_tag)}"
            )

        if zone is not None and not isinstance(zone, (bytes, str)):
            raise Exception(f"Expected zone to be a str, received: {type(zone)}")

        # map input types to rpc msg
        _params = dict()
        msg = dict(type="Subnets", request="ListSubnets", version=5, params=_params)
        _params["space-tag"] = space_tag
        _params["zone"] = zone
        reply = await self.rpc(msg)
        return reply

    @ReturnMapping(SubnetsResults)
    async def SubnetsByCIDR(self, cidrs=None):
        """SubnetsByCIDR returns the collection of subnets matching each CIDR in the input.

        cidrs : typing.Sequence[str]
        Returns -> SubnetsResults
        """
        if cidrs is not None and not isinstance(cidrs, (bytes, str, list)):
            raise Exception(f"Expected cidrs to be a Sequence, received: {type(cidrs)}")

        # map input types to rpc msg
        _params = dict()
        msg = dict(type="Subnets", request="SubnetsByCIDR", version=5, params=_params)
        _params["cidrs"] = cidrs
        reply = await self.rpc(msg)
        return reply
